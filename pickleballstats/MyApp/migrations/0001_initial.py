# Generated by Django 5.0.2 on 2024-02-10 22:05

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('f_name', models.CharField(max_length=100)),
                ('l_name', models.CharField(max_length=100)),
                ('birthdate', models.DateField()),
                ('sex', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('host', models.CharField(choices=[('PPA', 'Professional Pickelball Association'), ('MLP', 'Major League Pickleball'), ('APP', 'Association of Pickleball Professionals')], max_length=3)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_date', models.DateTimeField()),
                ('bracket', models.CharField(choices=[('MS', 'Mens Singles'), ('MD', 'Mens Doubles'), ('MXD', 'Mixed Doubles'), ('WD', 'Womens Doubles'), ('WS', 'Womens Singles')], max_length=3)),
                ('round', models.CharField(choices=[('QLF', 'Qualifier'), ('R64', 'Round of 64'), ('R32', 'Round of 32'), ('R16', 'Round of 16'), ('QF', 'Quarter Finals'), ('SF', 'Semi Finals'), ('GLD', 'Gold Medal Match'), ('BRZ', 'Bronze Medal Match')], max_length=3)),
                ('game_count', models.IntegerField(choices=[(1, 'Best of 1'), (3, 'Best of 3'), (5, 'Best of 5')])),
                ('players', models.ManyToManyField(blank=True, to='MyApp.player')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_points_played', models.IntegerField(default=0)),
                ('total_points_won', models.IntegerField(default=0)),
                ('serve_count', models.IntegerField(default=0)),
                ('serve_winner_count', models.IntegerField(default=0)),
                ('serve_loser_count', models.IntegerField(default=0)),
                ('serve_neutral_count', models.IntegerField(default=0)),
                ('serve_miss_count', models.IntegerField(default=0)),
                ('return_count', models.IntegerField(default=0)),
                ('return_winner_count', models.IntegerField(default=0)),
                ('return_loser_count', models.IntegerField(default=0)),
                ('return_neutral_count', models.IntegerField(default=0)),
                ('return_miss_count', models.IntegerField(default=0)),
                ('drive_count', models.IntegerField(default=0)),
                ('drive_winner_count', models.IntegerField(default=0)),
                ('drive_loser_count', models.IntegerField(default=0)),
                ('drive_neutral_count', models.IntegerField(default=0)),
                ('drive_miss_count', models.IntegerField(default=0)),
                ('volley_speed_up_count', models.IntegerField(default=0)),
                ('volley_speed_up_winner_count', models.IntegerField(default=0)),
                ('volley_speed_up_loser_count', models.IntegerField(default=0)),
                ('volley_speed_up_neutral_count', models.IntegerField(default=0)),
                ('volley_speed_up_miss_count', models.IntegerField(default=0)),
                ('off_bounce_speed_up_count', models.IntegerField(default=0)),
                ('off_bounce_speed_up_winner_count', models.IntegerField(default=0)),
                ('off_bounce_speed_up_loser_count', models.IntegerField(default=0)),
                ('off_bounce_speed_up_neutral_count', models.IntegerField(default=0)),
                ('off_bounce_speed_up_miss_count', models.IntegerField(default=0)),
                ('counter_count', models.IntegerField(default=0)),
                ('counter_winner_count', models.IntegerField(default=0)),
                ('counter_loser_count', models.IntegerField(default=0)),
                ('counter_neutral_count', models.IntegerField(default=0)),
                ('counter_miss_count', models.IntegerField(default=0)),
                ('reset_count', models.IntegerField(default=0)),
                ('lob_count', models.IntegerField(default=0)),
                ('lob_winner_count', models.IntegerField(default=0)),
                ('lob_loser_count', models.IntegerField(default=0)),
                ('lob_neutral_count', models.IntegerField(default=0)),
                ('lob_miss_count', models.IntegerField(default=0)),
                ('popup_count', models.IntegerField(default=0)),
                ('popup_winner_count', models.IntegerField(default=0)),
                ('popup_loser_count', models.IntegerField(default=0)),
                ('popup_neutral_count', models.IntegerField(default=0)),
                ('putaway_count', models.IntegerField(default=0)),
                ('putaway_winner_count', models.IntegerField(default=0)),
                ('putaway_loser_count', models.IntegerField(default=0)),
                ('putaway_neutral_count', models.IntegerField(default=0)),
                ('putaway_miss_count', models.IntegerField(default=0)),
                ('missed_dinks', models.IntegerField(default=0)),
                ('missed_drops', models.IntegerField(default=0)),
                ('nvz_faults', models.IntegerField(default=0)),
                ('service_faults', models.IntegerField(default=0)),
                ('technical_warnings', models.IntegerField(default=0)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='MyApp.match')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='MyApp.player')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bracket', models.CharField(choices=[('MD', 'Mens Doubles'), ('MXD', 'Mixed Doubles'), ('WD', 'Womens Doubles')], max_length=3)),
                ('player1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player1_team', to='MyApp.player')),
                ('player2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player2_team', to='MyApp.player')),
            ],
        ),
        migrations.AddField(
            model_name='match',
            name='teams',
            field=models.ManyToManyField(blank=True, to='MyApp.team'),
        ),
        migrations.AddField(
            model_name='match',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='MyApp.tournament'),
        ),
    ]
